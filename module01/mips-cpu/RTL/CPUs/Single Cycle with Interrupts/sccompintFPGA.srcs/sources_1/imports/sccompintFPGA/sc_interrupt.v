/************************************************
  The Verilog HDL code example is from the book
  Computer Principles and Design in Verilog HDL
  by Yamin Li, published by A JOHN WILEY & SONS
************************************************/
`include "mfp_ahb_const.vh"
module sc_interrupt_sys (
input                   SI_ClkIn,
input                   SI_Reset_N,
output [31:0]           inst,
output [31:0]           pc,
output [31:0]           aluout,
output [31:0]           memout,
input                   memclk,
input                   intr,
output                  inta,
input  [`MFP_N_SW-1 :0] IO_Switch,
input  [`MFP_N_PB-1 :0] IO_PB,
output [`MFP_N_LED-1:0] IO_LED,
output [ 7          :0] IO_7SEGEN_N,
output [ 6          :0] IO_7SEG_N,
output                  IO_BUZZ,                  
output                  IO_RGB_SPI_MOSI,
output                  IO_RGB_SPI_SCK,
output                  IO_RGB_SPI_CS,
output                  IO_RGB_DC,
output                  IO_RGB_RST,
output                  IO_RGB_VCC_EN,
output                  IO_RGB_PEN,
output                  IO_CS,
output                  IO_SCK,
input                   IO_SDO,
input                   UART_RX,
input[4:1]              JB);

    wire[31:0] dataBus; //Currently driven data bus based on HSEL
    wire[31:0] data_cpu; //data driven by cpu
    wire[31:0] data_mem; //data driven by data memory
    wire[31:0] data_gpio; //data driven by GPIO module

    wire   [31:0] data;                           // data to data memory
    wire          wmem;                           // write data memory
    wire clk;
    wire clrn;
    
    wire dbg_resetn_cpu;
    wire dbg_halt_cpu;
    
    assign clk = SI_ClkIn;
    assign clrn = SI_Reset_N & dbg_resetn_cpu;
    
    sccpu_intr cpu (clk,
                    clrn,
                    dbg_halt_cpu, //Halt signal input generated by JTAG core
                    dbg_halt_cpu ? 32'b0 : inst, //Current instruction input from instruction memory (if CPU is halted, this is forced to 0/NOP)
                    memout,
                    pc,
                    wmem,
                    aluout,
                    data_cpu,
                    intr,
                    inta);

    // Check if memory mapped I/O
    wire[2:0] HSEL;        
    assign memout = dataBus;
    sccomp_decoder sccomp_decoder(aluout,HSEL);
        
    //Be sure to use forward slashes '/', even on Windows
    parameter IMEM_FILE = "/home/mr-robot/Documents/arch/module01/mips-cpu/Software/Assembly/scintcode7segment/imem.mem";
    parameter DMEM_FILE = "/home/mr-robot/Documents/arch/module01/mips-cpu/Software/Assembly/scintcode7segment/dmem.mem";
    
    wire[31:0] dbg_imem_addr;
    wire[31:0] dbg_imem_din;
    wire dbg_imem_ce;
    wire dbg_imem_we;
    
    wire[31:0] dbg_dmem_addr;
    wire[31:0] dbg_dmem_din;
    wire dbg_dmem_ce;
    wire dbg_dmem_we;
    
    wire effectiveDMemWE = dbg_dmem_ce ? dbg_dmem_we : wmem;
    wire effectiveDMemCE = dbg_dmem_ce | HSEL[1];
    wire[31:0] effectiveDMemAddr = dbg_dmem_ce ? dbg_dmem_addr : aluout;
    uram #(.A_WIDTH(9), .INIT_FILE(DMEM_FILE), .READ_DELAY(0)) dmem
        (.clk(clk), .we(effectiveDMemWE), .cs(effectiveDMemCE), .addr(effectiveDMemAddr), .data_in(memout), .data_out(data_mem));

    wire[31:0] effectiveIMemAddr = dbg_imem_ce ? dbg_imem_addr : pc;
    uram #(.A_WIDTH(9), .INIT_FILE(IMEM_FILE), .READ_DELAY(0)) imem
        (.clk(clk), .we(dbg_imem_we), .cs(1'b1), .addr(effectiveIMemAddr), .data_in(dbg_imem_din), .data_out(inst));    
    
    cpugpio gpio (.clk(clk),
        .clrn(clrn),
        .dataout(data_gpio),
        .datain(memout),
        .haddr(aluout[5:2]),
        .we(wmem),
        .HSEL(HSEL[2]),
        .IO_Switch(IO_Switch),
        .IO_PB(IO_PB),
        .IO_LED(IO_LED),
        .IO_7SEGEN_N(IO_7SEGEN_N),
        .IO_7SEG_N(IO_7SEG_N),
        .IO_BUZZ(IO_BUZZ),                
        .IO_RGB_SPI_MOSI(IO_RGB_SPI_MOSI),
        .IO_RGB_SPI_SCK(IO_RGB_SPI_SCK),
        .IO_RGB_SPI_CS(IO_RGB_SPI_CS),
        .IO_RGB_DC(IO_RGB_DC),
        .IO_RGB_RST(IO_RGB_RST),
        .IO_RGB_VCC_EN(IO_RGB_VCC_EN),
        .IO_RGB_PEN(IO_RGB_PEN),
        .IO_SDO(IO_SDO),
        .IO_CS(IO_CS),
        .IO_SCK(IO_SCK));
        
    debug_control debug_if(.serial_tx(JB[2]), .serial_rx(JB[3]), .cpu_clk(clk),
        .sys_rstn(SI_Reset_N), .cpu_imem_addr(dbg_imem_addr), 
        .cpu_debug_to_imem_data(dbg_imem_din), .cpu_imem_to_debug_data(inst),
        .cpu_imem_we(dbg_imem_we), .cpu_imem_ce(dbg_imem_ce),
        .cpu_dmem_addr(dbg_dmem_addr), .cpu_debug_to_dmem_data(dbg_dmem_din),
        .cpu_imem_to_debug_data_ready(dbg_imem_ce & ~dbg_imem_we),
        .cpu_dmem_to_debug_data_ready(dbg_dmem_ce & ~dbg_dmem_we),
        .cpu_dmem_to_debug_data(data_mem), .cpu_dmem_we(dbg_dmem_we),
        .cpu_dmem_ce(dbg_dmem_ce), .cpu_resetn_cpu(dbg_resetn_cpu),
        .cpu_halt_cpu(dbg_halt_cpu));
  
    
   assign dataBus = dbg_dmem_we ? dbg_dmem_din :
                    wmem ? data_cpu :
                    HSEL[1] ? data_mem :
                    HSEL[2] ? data_gpio :
                    32'b0;

endmodule
